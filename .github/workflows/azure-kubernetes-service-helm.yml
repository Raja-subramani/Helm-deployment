# # This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
# #
# # This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# # The ACR should be attached to the AKS cluster
# # For instructions see:
# #   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
# #   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
# #   - https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#configure-acr-integration-for-existing-aks-clusters
# #   - https://github.com/Azure/aks-create-action
# #
# # To configure this workflow:
# #
# # 1. Set the following secrets in your repository (instructions for getting these
# #    https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux)):
# #    - AZURE_CLIENT_ID
# #    - AZURE_TENANT_ID
# #    - AZURE_SUBSCRIPTION_ID
# #
# # 2. Set the following environment variables (or replace the values below):
# #    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
# #    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
# #    - RESOURCE_GROUP (where your cluster is deployed)
# #    - CLUSTER_NAME (name of your AKS cluster)
# #    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
# #
# # 3. Choose the appropriate render engine for the bake step https://github.com/Azure/k8s-bake. The config below assumes Helm.
# #    Set your helmChart, overrideFiles, overrides, and helm-version to suit your configuration.
# #    - CHART_PATH (path to your helm chart)
# #    - CHART_OVERRIDE_PATH (path to your helm chart with override values)
# #
# # For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# # For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# # For more options with the actions used below please refer to https://github.com/Azure/login

# name: Build and deploy an app to AKS with Helm

# on:
#   push:
#     branches: ["main"]
#   workflow_dispatch:

# env:
#   AZURE_CONTAINER_REGISTRY: "your-azure-container-registry"
#   CONTAINER_NAME: "your-container-name"
#   RESOURCE_GROUP: "your-resource-group"
#   CLUSTER_NAME: "your-cluster-name"
#   CHART_PATH: "your-chart-path"
#   CHART_OVERRIDE_PATH: "your-chart-override-path"

# jobs:
#   buildImage:
#     permissions:
#       contents: read
#       id-token: write
#     runs-on: ubuntu-latest
#     steps:
#       # Checks out the repository this file is in
#       - uses: actions/checkout@v3

#       # Logs in with your Azure credentials
#       - name: Azure login
#         uses: azure/login@v1.4.6
#         with:
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#       # Builds and pushes an image up to your Azure Container Registry
#       - name: Build and push image to ACR
#         run: |
#           az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} .

#   deploy:
#     permissions:
#       actions: read
#       contents: read
#       id-token: write
#     runs-on: ubuntu-latest
#     needs: [buildImage]
#     steps:
#       # Checks out the repository this file is in
#       - uses: actions/checkout@v3

#       # Logs in with your Azure credentials
#       - name: Azure login
#         uses: azure/login@v1.4.6
#         with:
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#       # Use kubelogin to configure your kubeconfig for Azure auth
#       - name: Set up kubelogin for non-interactive login
#         uses: azure/use-kubelogin@v1
#         with:
#           kubelogin-version: 'v0.0.25'

#       # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
#       - name: Get K8s context
#         uses: azure/aks-set-context@v3
#         with:
#           resource-group: ${{ env.RESOURCE_GROUP }}
#           cluster-name: ${{ env.CLUSTER_NAME }}
#           admin: 'false'
#           use-kubelogin: 'true'

#       # Runs Helm to create manifest files
#       - name: Bake deployment
#         uses: azure/k8s-bake@v2
#         with:
#           renderEngine: "helm"
#           helmChart: ${{ env.CHART_PATH }}
#           overrideFiles: ${{ env.CHART_OVERRIDE_PATH }}
#           overrides: |
#             replicas:2
#           helm-version: "latest"
#         id: bake

#       # Deploys application based on manifest files from previous step
#       - name: Deploy application
#         uses: Azure/k8s-deploy@v4
#         with:
#           action: deploy
#           manifests: ${{ steps.bake.outputs.manifestsBundle }}
#           images: |
#             ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}





























# name: Push to ACR
# on:
#   workflow_dispatch:
# ####   push:
# ####      branches:
# ####       - main
#       # Set up environment variables
#       ############################(Above Workflow_dispatch command)
# #env:
#   # Name of your ACR instance
#   #REGISTRY_NAME: cicdpipeline.azurecr.io
  
#   # Name of your AKS cluster
#   #CLUSTER_NAME: myaks
  
#   # Name of your resource group where ACR and AKS are located
#   #RESOURCE_GROUP: rg-pipeline-eus-01
  
#   # Name of your Docker image 
#   #IMAGE_NAME: python-imdb
    
# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
#       - name: Login to Azure Container Registry
#         uses: azure/docker-login@v1
#         with:
#           login-server: cicdpipeline.azurecr.io
#           username: ${{ secrets.ACR_USERNAME }}
#           password: ${{ secrets.ACR_PASSWORD }}
#       - name: Build and push Docker image
         
#         run: |
#           docker build -t cicdpipeline.azurecr.io/python:latest -f "C:\Users\onesi\ci-cd_sathish\src\Dockerfile" C:/Users/onesi/ci-cd_sathish/src
#           docker push cicdpipeline.azurecr.io/python:latest
          
name: Build and Push Docker Image

on:
  workflow_dispatch:
#   push:
#     branches:
#       - main
 
env:
  HELM_CHART: pythonchart
  HELM_NAMESPACE: demochart
 
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2   
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: cicdpipeline.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
 #         
      - name: Login to Azure
        uses: Azure/login@v1
        with:
         creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Get AKS credentials
        run: az aks get-credentials --resource-group rg-cicdpipeline-eus-action --name aks-cluster-pipeline    
 #        
      - name: Build and push Docker images
        uses: docker/build-push-action@v2
        with:
          context: /home/runner/work/ci-cd-sathish/ci-cd-sathish/src #ci-cd_sathish two times mention pannaum
          push: true
          tags: |
            cicdpipeline.azurecr.io/python:${{ github.run_number }}   
        # docker image name = cicdpiipeline.azurecr.io
        #acr repositor name = python
        # tag = automatically increase
        #   docker build -t cicdpipeline.azurecr.io/python:${{ github.run_number }} .
        #   docker push cicdpipeline.azurecr.io/python:${{ github.run_number }}
      - name: Setup Helm and Kubectl
        uses: azure/setup-helm@v1
        with:
         version: 'v3.7.0'
      - name: Create Namespace
        run: kubectl create namespace demochart
      - name: Install Helm Diff Plugin
        run: helm plugin install https://github.com/databus23/helm-diff --version v3.1.3
      - name: Upgrade Helm Chart
        run: |
          helm upgrade --install  --namespace ${{ env.HELM_NAMESPACE }} --set image.tag=latest  ${{ env.HELM_CHART }}  "/home/runner/work/ci-cd-sathish/ci-cd-sathish/pythonchart"
          




